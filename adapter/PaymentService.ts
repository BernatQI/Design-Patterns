// ./adapter/PaymentService.ts
import { IPaymentProcessor } from './IPaymentProcessor';

export class PaymentService {
    private processor: IPaymentProcessor;

    constructor(processor: IPaymentProcessor) {
        this.processor = processor;
    }

    // Cambia el procesador de pagos din√°micamente
    setPaymentProcessor(processor: IPaymentProcessor): void {
        this.processor = processor;
        console.log("üîÑ Procesador de pagos cambiado");
    }

    // M√©todo unificado que funciona con cualquier adapter
    executePayment(amount: number, currency: string, cardNumber: string): void {
        console.log(`\nüí≥ Iniciando pago de ${amount} ${currency}`);
        
        // Validar tarjeta
        if (!this.processor.validateCard(cardNumber)) {
            console.log("‚ùå Tarjeta inv√°lida");
            return;
        }

        // Procesar pago
        const result = this.processor.processPayment(amount, currency);
        
        if (result.success) {
            console.log(`‚úÖ ${result.message}`);
            console.log(`üßæ ID de transacci√≥n: ${result.transactionId}`);
        } else {
            console.log(`‚ùå Error: ${result.message}`);
        }
    }

    executeRefund(transactionId: string, amount: number): void {
        console.log(`\nüîÑ Iniciando reembolso de ${amount} para ${transactionId}`);
        
        const result = this.processor.refund(transactionId, amount);
        
        if (result.success) {
            console.log(`‚úÖ ${result.message}`);
            console.log(`üßæ ID de reembolso: ${result.refundId}`);
        } else {
            console.log(`‚ùå Error: ${result.message}`);
        }
    }
}