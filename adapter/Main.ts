// ./adapter/Main.ts
import { PaymentService } from './PaymentService';
import { PayPalAdapter } from './PayPalAdapter';
import { StripeAdapter } from './StripeAdapter';

function main(): void {
    console.log("=== üîå Patr√≥n ADAPTER - Sistema de Pagos ===\n");

    // Crear adapters para diferentes APIs de pago
    const paypalAdapter = new PayPalAdapter();
    const stripeAdapter = new StripeAdapter();

    // Crear servicio de pagos
    const paymentService = new PaymentService(paypalAdapter);

    console.log("\n1Ô∏è‚É£ Usando PayPal (a trav√©s del adapter):");
    console.log("=".repeat(50));
    
    paymentService.executePayment(99.99, "USD", "4532123456789012");
    paymentService.executeRefund("PP_1234567890", 99.99);

    console.log("\n" + "-".repeat(60) + "\n");

    console.log("2Ô∏è‚É£ Cambiando a Stripe (mismo c√≥digo cliente):");
    console.log("=".repeat(50));
    
    // Cambiar procesador sin modificar c√≥digo cliente
    paymentService.setPaymentProcessor(stripeAdapter);
    
    paymentService.executePayment(149.50, "EUR", "5555444433221111");
    paymentService.executeRefund("ch_abc123def", 149.50);

    console.log("\n" + "-".repeat(60) + "\n");

    console.log("3Ô∏è‚É£ Probando validaci√≥n de tarjetas:");
    console.log("=".repeat(50));
    
    // Probar con tarjeta inv√°lida
    paymentService.executePayment(25.00, "USD", "123"); // Tarjeta inv√°lida

    console.log("\n4Ô∏è‚É£ Ventajas del patr√≥n Adapter:");
    console.log("=".repeat(50));
    console.log("‚úÖ APIs incompatibles trabajan juntas");
    console.log("‚úÖ C√≥digo cliente no cambia al cambiar proveedores");
    console.log("‚úÖ Reutilizaci√≥n de c√≥digo existente");
    console.log("‚úÖ Separaci√≥n de responsabilidades");
    console.log("‚úÖ F√°cil agregar nuevos proveedores");
}

// Ejecutar el ejemplo
main();